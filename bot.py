import telebot
import requests
import datetime
import schedule
import time
import threading
from bs4 import BeautifulSoup
import random
import socket

# --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ ---
try:
    lock_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
    lock_socket.bind('\0digital_fund_bot_lock')
except socket.error:
    print("‚õî –û–±–Ω–∞—Ä—É–∂–µ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞. –ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é!")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8067270518:AAFir3k_EuRhNlGF9bD9ER4VHQevld-rquk"
CHANNEL_ID = "@Digital_Fund_1"
CMC_API_KEY = "6316a41d-db32-4e49-a2a3-b66b96c663bf"
REQUEST_TIMEOUT = 15  # —Å–µ–∫—É–Ω–¥

bot = telebot.TeleBot(TOKEN, threaded=False)  # –û—Ç–∫–ª—é—á–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

# --- –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko ---
def fetch_coingecko():
    try:
        url = "https://api.coingecko.com/api/v3/global"
        response = requests.get(url, timeout=REQUEST_TIMEOUT)
        response.raise_for_status()
        data = response.json()
        
        btc_dominance = round(data["data"]["market_cap_percentage"]["btc"], 2)
        total_market_cap = round(data["data"]["total_market_cap"]["usd"] / 1e12, 2)
        market_change = round(data["data"]["market_cap_change_percentage_24h_usd"], 2)
        active_cryptos = data["data"]["active_cryptocurrencies"]
        total_volume = round(data["data"]["total_volume"]["usd"] / 1e9, 2)
        
        return (
            f"üìä *CoinGecko Global Stats*\n"
            f"‚Ä¢ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: *${total_market_cap}T*\n"
            f"‚Ä¢ –û–±—ä–µ–º 24—á: *${total_volume}B*\n"
            f"‚Ä¢ BTC –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: *{btc_dominance}%*\n"
            f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: *{market_change}%*\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: *{active_cryptos}*"
        )
    except Exception as e:
        print(f"CoinGecko error: {str(e)}")
        return "‚ùå CoinGecko: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏"

# --- –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å CoinMarketCap ---
def fetch_cmc():
    try:
        headers = {
            "X-CMC_PRO_API_KEY": CMC_API_KEY,
            "Accept": "application/json"
        }
        url = "https://pro-api.coinmarketcap.com/v1/global-metrics/quotes/latest"
        response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
        response.raise_for_status()
        data = response.json()["data"]
        
        btc_dominance = round(data["btc_dominance"], 2)
        total_market_cap = round(data["quote"]["USD"]["total_market_cap"] / 1e12, 2)
        market_change = round(data["quote"]["USD"]["total_market_cap_yesterday_percentage_change"], 2)
        eth_dominance = round(data["eth_dominance"], 2)
        
        return (
            f"üìà *CoinMarketCap Metrics*\n"
            f"‚Ä¢ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: *${total_market_cap}T*\n"
            f"‚Ä¢ BTC –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: *{btc_dominance}%*\n"
            f"‚Ä¢ ETH –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: *{eth_dominance}%*\n"
            f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –≤—á–µ—Ä–∞: *{market_change}%*"
        )
    except Exception as e:
        print(f"CMC error: {str(e)}")
        return "‚ùå CoinMarketCap: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API"

# --- –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π ---
def fetch_rbk_crypto():
    try:
        url = "https://www.rbc.ru/crypto/"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        news_items = soup.select('.item__title')[:3]
        
        if not news_items:
            return "üîç RBK Crypto: –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"
            
        news_list = []
        for idx, item in enumerate(news_items, 1):
            title = item.text.strip()
            link = item.find('a')['href'] if item.find('a') else '#'
            news_list.append(f"{idx}. [{title}]({link})")
        
        return "üì∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ RBK Crypto:*\n" + "\n".join(news_list)
    except Exception as e:
        print(f"RBK error: {str(e)}")
        return "‚ùå RBK Crypto: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ ---
def get_crypto_fact():
    facts = [
        "üí° –ü–µ—Ä–≤–∞—è BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: 10,000 BTC –∑–∞ 2 –ø–∏—Ü—Ü—ã –≤ 2010",
        "üîê –ö–æ—à–µ–ª—å–∫–∏ —Ö—Ä–∞–Ω—è—Ç –Ω–µ –º–æ–Ω–µ—Ç—ã, –∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏",
        "üåç –≠—Ñ–∏—Ä–∏—É–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω 19-–ª–µ—Ç–Ω–∏–º –ë—É—Ç–µ—Ä–∏–Ω—ã–º –≤ 2013",
        "‚ö° Lightning Network - —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö BTC –ø–ª–∞—Ç–µ–∂–µ–π",
        "ü¶Ñ Uniswap —Å–æ–∑–¥–∞–Ω –±–µ–∑ –≤–µ–Ω—á—É—Ä–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è"
    ]
    return random.choice(facts)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ---
def generate_post():
    try:
        now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        post = (
            f"üöÄ *–ö—Ä–∏–ø—Ç–æ-–æ–±–∑–æ—Ä –Ω–∞ {now}*\n\n"
            f"{fetch_coingecko()}\n\n"
            f"{fetch_cmc()}\n\n"
            f"{fetch_rbk_crypto()}\n\n"
            f"{get_crypto_fact()}\n\n"
            f"#Crypto #–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ #–ù–æ–≤–æ—Å—Ç–∏ #–ë–ª–æ–∫—á–µ–π–Ω"
        )
        return post
    except Exception as e:
        print(f"Post generation error: {str(e)}")
        return f"üöÄ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –æ–±–∑–æ—Ä –Ω–∞ {now}\n\n–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞."

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
def send_market_update():
    try:
        post = generate_post()
        if len(post) > 4096:
            parts = [post[i:i+4000] for i in range(0, len(post), 4000)]
            for part in parts:
                bot.send_message(CHANNEL_ID, part, parse_mode="Markdown")
                time.sleep(1)
        else:
            bot.send_message(CHANNEL_ID, post, parse_mode="Markdown")
    except Exception as e:
        print(f"Send error: {str(e)}")

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º ---
def schedule_posts():
    for hour in range(8, 23):
        minute = random.randint(0, 20)
        schedule.every().day.at(f"{hour:02d}:{minute:02d}").do(send_market_update)
    
    while True:
        schedule.run_pending()
        time.sleep(60)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ ---
def run_bot():
    bot.remove_webhook()
    while True:
        try:
            print("üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
            bot.infinity_polling(long_polling_timeout=20, timeout=90)
        except telebot.apihelper.ApiTelegramException as e:
            if "Conflict" in str(e):
                print(f"üî¥ –ö–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {e}")
                print("üü† –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")
                time.sleep(30)
            else:
                print(f"üî¥ –û—à–∏–±–∫–∞ Telegram API: {e}")
                time.sleep(60)
        except Exception as e:
            print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            print("üü† –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)

if __name__ == "__main__":
    print("=== –ó–∞–ø—É—Å–∫ –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç–∞ ===")
    print(f"–í–µ—Ä—Å–∏—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=schedule_posts, daemon=True)
    scheduler_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    run_bot()
