import os
import logging
import json
from datetime import datetime, timedelta
import requests
from bs4 import BeautifulSoup
from telegram import Bot
from apscheduler.schedulers.blocking import BlockingScheduler
from apscheduler.triggers.cron import CronTrigger
from flask import Flask

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8067270518:AAFir3k_EuRhNlGF9bD9ER4VHQevld-rquk"
CHANNEL_ID = "@Digital_Fund_1"
DATA_FILE = "posted_news.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def load_posted_news():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_posted_news(posted):
    with open(DATA_FILE, 'w') as f:
        json.dump(posted, f)

def get_crypto_news():
    logger.info("–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
    url = "https://www.coindesk.com/"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    
    news = []
    for article in soup.find_all('article')[:10]:
        try:
            title = article.find('h2').text.strip()
            link = article.find('a')['href']
            time = article.find('time')['datetime']
            news.append({
                'title': title,
                'link': link,
                'time': time
            })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
    return news

def post_news():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    now = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if 8 <= now.hour <= 22:
        bot = Bot(token=BOT_TOKEN)
        posted = load_posted_news()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
        news = get_crypto_news()
        
        for article in news:
            if article['title'] not in posted:
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = (
                    f"üì∞ *{article['title']}*\n\n"
                    f"üîó [–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é]({article['link']})\n"
                    f"üïí {datetime.fromisoformat(article['time']).strftime('%d.%m.%Y %H:%M')}"
                )
                
                # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞
                bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=message,
                    parse_mode='Markdown'
                )
                logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç: {article['title']}")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
                posted.append(article['title'])
                save_posted_news(posted)
                break

@app.route('/')
def home():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω", 200

def run_scheduler():
    scheduler = BlockingScheduler()
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Å —Å 08:00 –¥–æ 22:00
    scheduler.add_job(
        post_news,
        trigger=CronTrigger(
            hour='8-22',
            minute=0,
            timezone='Europe/Moscow'
        )
    )
    
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    post_news()
    
    scheduler.start()

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    from threading import Thread
    Thread(target=run_scheduler).start()
    app.run(host='0.0.0.0', port=10000)
