import os
import telebot
import requests
import datetime
import schedule
import time
import threading
from bs4 import BeautifulSoup
import logging
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã)
TOKEN = "8067270518:AAFir3k_EuRhNlGF9bD9ER4VHQevld-rquk"
CHANNEL_ID = "@Digital_Fund_1"
CMC_API_KEY = "6316a41d-db32-4e49-a2a3-b66b96c663bf"
REQUEST_TIMEOUT = 15
PORT = int(os.getenv('PORT', 10000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try:
    bot = telebot.TeleBot(TOKEN, num_threads=1, skip_pending=True)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    exit(1)

@app.route('/')
def health_check():
    return "Crypto Bot is Running", 200

def fetch_coingecko():
    try:
        url = "https://api.coingecko.com/api/v3/global"
        response = requests.get(url, timeout=REQUEST_TIMEOUT)
        response.raise_for_status()
        data = response.json()
        btc_dominance = round(data["data"]["market_cap_percentage"]["btc"], 2)
        total_market_cap = round(data["data"]["total_market_cap"]["usd"] / 1e12, 2)
        market_change = round(data["data"]["market_cap_change_percentage_24h_usd"], 2)
        return f"üìä CoinGecko: –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è ${total_market_cap}T | BTC –¥–æ–º–∏–Ω. {btc_dominance}% | –ò–∑–º. 24—á: {market_change}%"
    except Exception as e:
        logger.error(f"CoinGecko error: {e}")
        return "‚ùå CoinGecko: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"

def fetch_cmc():
    try:
        url = "https://pro-api.coinmarketcap.com/v1/global-metrics/quotes/latest"
        headers = {"X-CMC_PRO_API_KEY": CMC_API_KEY}
        response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
        response.raise_for_status()
        data = response.json()["data"]
        btc_dominance = round(data["btc_dominance"], 2)
        total_market_cap = round(data["quote"]["USD"]["total_market_cap"] / 1e12, 2)
        market_change = round(data["quote"]["USD"]["total_market_cap_yesterday_percentage_change"], 2)
        return f"üìà CMC: –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è ${total_market_cap}T | BTC –¥–æ–º–∏–Ω. {btc_dominance}% | –ò–∑–º.: {market_change}%"
    except Exception as e:
        logger.error(f"CMC error: {e}")
        return "‚ùå CMC: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"

def fetch_rbk_crypto():
    try:
        url = "https://www.rbc.ru/crypto/"
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
        soup = BeautifulSoup(response.text, 'html.parser')
        headlines = [h.text.strip() for h in soup.select('.item__title')[:3]]
        return "üì∞ RBK Crypto:" " + "\n".join(f"‚Ä¢ {h}" for h in headlines)
    except Exception as e:
        logger.error(f"RBK error: {e}")
        return "‚ùå RBK: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"

def generate_post():
    now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
    return f"""üöÄ –ö—Ä–∏–ø—Ç–æ-–æ–±–∑–æ—Ä –Ω–∞ {now}

{fetch_coingecko()}
{fetch_cmc()}
{fetch_rbk_crypto()}

#Crypto #–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ #–ù–æ–≤–æ—Å—Ç–∏"""

def send_market_update():
    try:
        bot.send_message(CHANNEL_ID, generate_post(), parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Send error: {e}")

def schedule_posts():
    for hour in range(8, 23):
        schedule.every().day.at(f"{hour:02d}:00").do(send_market_update)
    while True:
        schedule.run_pending()
        time.sleep(60)

def run_bot():
    bot.remove_webhook()
    logger.info("Starting bot polling...")
    bot.infinity_polling(none_stop=True, timeout=30)

if __name__ == "__main__":
    scheduler_thread = threading.Thread(target=schedule_posts, daemon=True)
    scheduler_thread.start()

    threading.Thread(
        target=lambda: app.run(host='0.0.0.0', port=PORT),
        daemon=True
    ).start()

    run_bot()
