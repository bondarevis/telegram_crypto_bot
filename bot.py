import os
import logging
import json
from datetime import datetime
import requests
from bs4 import BeautifulSoup
from telegram import Bot
from apscheduler.schedulers.blocking import BlockingScheduler
from apscheduler.triggers.cron import CronTrigger
from flask import Flask

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8067270518:AAFir3k_EuRhNlGF9bD9ER4VHQevld-rquk"
CHANNEL_ID = "@Digital_Fund_1"
DATA_FILE = "posted_news.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def load_posted_news():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_posted_news(posted):
    with open(DATA_FILE, 'w') as f:
        json.dump(posted, f)

def get_crypto_news():
    logger.info("–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
    url = "https://www.coindesk.com/"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        
        news = []
        for article in soup.find_all('article')[:15]:
            try:
                title = article.find('h2').text.strip()
                link = article.find('a')['href']
                time = article.find('time')['datetime']
                
                if not link.startswith('http'):
                    link = f'https://www.coindesk.com{link}'
                    
                news.append({
                    'title': title,
                    'link': link,
                    'time': time
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        return news
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")
        return []

def post_news():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    now = datetime.now().astimezone()
    
    if 8 <= now.hour <= 22:
        try:
            bot = Bot(token=BOT_TOKEN)
            posted = load_posted_news()
            news = get_crypto_news()
            
            for article in news:
                if article['title'] not in posted:
                    message = (
                        f"üì∞ *{article['title']}*\n\n"
                        f"üîó [–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é]({article['link']})\n"
                        f"üïí {datetime.fromisoformat(article['time']).strftime('%d.%m.%Y %H:%M')}"
                    )
                    
                    bot.send_message(
                        chat_id=CHANNEL_ID,
                        text=message,
                        parse_mode='Markdown'
                    )
                    logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {article['title']}")
                    posted.append(article['title'])
                    save_posted_news(posted)
                    break
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω | Crypto News Channel", 200

def run_scheduler():
    scheduler = BlockingScheduler()
    
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    scheduler.add_job(
        post_news,
        trigger=CronTrigger(
            hour='8-22',
            minute=0,
            timezone='Europe/Moscow'
        )
    )
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    try:
        post_news()
    except Exception as e:
        logger.error(f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    scheduler.start()

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    from threading import Thread
    Thread(target=run_scheduler).start()
    app.run(host='0.0.0.0', port=10000)
