import os
import telebot
import requests
import datetime
import threading
import logging
import time
from flask import Flask
import pytz
import openai
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8067270518:AAFir3k_EuRhNlGF9bD9ER4VHQevld-rquk"
CHANNEL_ID = "@Digital_Fund_1"
CMC_API_KEY = "6316a41d-db32-4e49-a2a3-b66b96c663bf"
DEEPSEEK_API_KEY = "sk-1b4a385cf98446f2995a58ba9a6fd4b8"
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
PORT = 10000

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)
scheduler = BackgroundScheduler(timezone=MOSCOW_TZ)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DeepSeek
openai.api_key = DEEPSEEK_API_KEY
openai.api_base = "https://api.deepseek.com/v1"

def generate_hourly_post():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI"""
    try:
        response = openai.ChatCompletion.create(
            model="deepseek-chat",
            messages=[{
                "role": "user",
                "content": "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö. –¢–µ–º—ã: DeFi, NFT, Web3. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ markdown."
            }],
            temperature=0.7,
            max_tokens=500
        )
        return f"üïí *–ö—Ä–∏–ø—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {datetime.datetime.now(MOSCOW_TZ).strftime('%H:%M')}*\n\n{response.choices[0].message.content}\n\n#–ù–æ–≤–æ—Å—Ç–∏"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        return "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ."

def fetch_market_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç CoinMarketCap"""
    try:
        url = "https://pro-api.coinmarketcap.com/v1/global-metrics/quotes/latest"
        headers = {"X-CMC_PRO_API_KEY": CMC_API_KEY}
        response = requests.get(url, headers=headers, timeout=20)
        data = response.json()["data"]
        
        return (
            "üìà *–†—ã–Ω–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n"
            f"‚Ä¢ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${round(data['quote']['USD']['total_market_cap']/1e12, 2)}T\n"
            f"‚Ä¢ BTC –î–æ–º–∏–Ω–∞—Ü–∏—è: {round(data['btc_dominance'], 2)}%\n"
            f"‚Ä¢ –û–±—ä–µ–º 24—á: ${round(data['quote']['USD']['total_volume_24h']/1e9, 2)}B\n"
            "#–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ #–†—ã–Ω–æ–∫"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ CoinMarketCap: {str(e)}")
        return None

def generate_educational_post():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        response = openai.ChatCompletion.create(
            model="deepseek-chat",
            messages=[{
                "role": "user",
                "content": "–û–±—ä—è—Å–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –±–ª–æ–∫—á–µ–π–Ω–∞ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º. –ü—Ä–∏–º–µ—Ä—ã, —ç–º–æ–¥–∑–∏, markdown."
            }],
            temperature=0.6,
            max_tokens=800
        )
        return f"üìö *–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª*\n\n{response.choices[0].message.content}\n\n#–û–±—É—á–µ–Ω–∏–µ"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        return None

def send_post(content):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
    try:
        if content:
            bot.send_message(
                chat_id=CHANNEL_ID,
                text=content,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {datetime.datetime.now(MOSCOW_TZ).strftime('%d.%m %H:%M')}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    # –ü–æ—á–∞—Å–æ–≤—ã–µ –ø–æ—Å—Ç—ã 09:00-21:00
    scheduler.add_job(
        lambda: send_post(generate_hourly_post()),
        CronTrigger(hour='9-21', minute=0)
    )
    
    # –†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    scheduler.add_job(
        lambda: send_post(fetch_market_data()),
        CronTrigger(hour='8,22', minute=0)
    )
    
    # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    scheduler.add_job(
        lambda: send_post(generate_educational_post()),
        CronTrigger(hour='15,19', minute=30)
    )

@app.route('/')
def health_check():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω", 200

if __name__ == "__main__":
    os.environ['TZ'] = 'Europe/Moscow'
    time.tzset()
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    setup_scheduler()
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫ Flask
    threading.Thread(
        target=lambda: app.run(host='0.0.0.0', port=PORT, debug=False),
        daemon=True
    ).start()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    try:
        while True:
            time.sleep(3600)
    except KeyboardInterrupt:
        scheduler.shutdown()
        logger.info("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
