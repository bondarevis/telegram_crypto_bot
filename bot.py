import os
import logging
import asyncio
import json
from datetime import datetime, time, timedelta
from urllib.parse import urlparse, urlunparse
from dotenv import load_dotenv
from telethon import TelegramClient, errors
from bs4 import BeautifulSoup
import aiohttp

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
API_ID = int(os.getenv("API_ID", 27952573))          # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞ my.telegram.org
API_HASH = os.getenv("API_HASH", "1bca07bccb96a13a6cc2fa2ca54b063a")  # –í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ö—ç—à
BOT_TOKEN = "8067270518:AAFir3k_EuRhNlGF9bD9ER4VHQevld-rquk"
CHANNEL_ID = "@Digital_Fund_1"
HISTORY_FILE = "/tmp/posted_urls.json"       # –î–ª—è Render Persistent Storage
STARTUP_FLAG = "/tmp/first_run.flag"         # –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

# –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
NEWS_SOURCES = [
    {
        "name": "Cointelegraph",
        "url": "https://cointelegraph.com/",
        "selectors": {
            "articles": "div.posts-listing__item",
            "title": "span.posts-listing__title",
            "link": "a.posts-listing__item__permalink"
        }
    },
    {
        "name": "Coindesk",
        "url": "https://www.coindesk.com/",
        "selectors": {
            "articles": "div.main-body section div.card",
            "title": "div.card-title a",
            "link": "div.card-title a"
        }
    }
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(None, API_ID, API_HASH)
lock = asyncio.Lock()  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

def normalize_url(url: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç URL –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É, —É–¥–∞–ª—è—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    parsed = urlparse(url)
    return urlunparse(parsed._replace(query="", fragment=""))

async def load_history() -> set:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö URL"""
    try:
        with open(HISTORY_FILE, 'r') as f:
            return set(json.load(f))
    except (FileNotFoundError, json.JSONDecodeError):
        return set()

async def save_history(urls: set):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª"""
    with open(HISTORY_FILE, 'w') as f:
        json.dump(list(urls), f)

async def safe_start() -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    try:
        await client.start(bot_token=BOT_TOKEN)
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        return True
    except errors.FloodWaitError as e:
        logger.error(f"‚è≥ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ: {e.seconds} —Å–µ–∫.")
        await asyncio.sleep(e.seconds)
        return False
    except Exception as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return False

async def send_start_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    try:
        if not os.path.exists(STARTUP_FLAG):
            await client.send_message(
                CHANNEL_ID,
                "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å 08:00 –¥–æ 22:00 –ø–æ –ú–°–ö."
            )
            with open(STARTUP_FLAG, 'w') as f:
                f.write("1")
            logger.info("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")

async def fetch_articles(session: aiohttp.ClientSession, source: dict):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç—å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    try:
        async with session.get(source['url']) as response:
            html = await response.text()
            soup = BeautifulSoup(html, 'lxml')
            articles = []
            
            for item in soup.select(source['selectors']['articles']):
                title = item.select_one(source['selectors']['title'])
                link = item.select_one(source['selectors']['link'])
                
                if title and link:
                    raw_url = link['href']
                    full_url = normalize_url(
                        raw_url if raw_url.startswith('http') 
                        else f"{source['url']}{raw_url.lstrip('/')}"
                    )
                    articles.append({
                        'source': source['name'],
                        'title': title.text.strip(),
                        'url': full_url
                    })
            return articles
    except Exception as e:
        logger.error(f"üîß –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {source['name']}: {str(e)}")
        return []

async def publish_posts(articles: list, history: set):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    new_urls = set()
    for article in articles:
        if article['url'] not in history:
            try:
                message = (
                    f"üìå **{article['source']}**\n"
                    f"‚ñ´Ô∏è {article['title']}\n"
                    f"üîó [–ß–∏—Ç–∞—Ç—å]({article['url']})"
                )
                await client.send_message(CHANNEL_ID, message, link_preview=False)
                new_urls.add(article['url'])
                await asyncio.sleep(30)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
    return new_urls

async def main_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π —Ü–∏–∫–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    async with aiohttp.ClientSession() as session:
        while True:
            now = datetime.now()
            current_time = now.time()
            
            # –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: 08:00-22:00
            if time(8, 0) <= current_time <= time(22, 0):
                async with lock:  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                    try:
                        history = await load_history()
                        total_new = 0
                        
                        # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                        for source in NEWS_SOURCES:
                            articles = await fetch_articles(session, source)
                            new_urls = await publish_posts(articles, history)
                            total_new += len(new_urls)
                            history.update(new_urls)
                        
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
                        if total_new > 0:
                            await save_history(history)
                        
                        logger.info(f"üîÑ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π: {total_new}")
                        await asyncio.sleep(3600)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 1 —á–∞—Å
                        
                    except Exception as e:
                        logger.error(f"üí• –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {str(e)}")
                        await asyncio.sleep(600)  # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 –º–∏–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ
            else:
                # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                next_run = now.replace(
                    hour=8,
                    minute=0,
                    second=0,
                    microsecond=0
                ) + timedelta(days=1 if now.hour >= 22 else 0)
                
                delay = (next_run - now).total_seconds()
                logger.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ {next_run.strftime('%d.%m %H:%M')}")
                await asyncio.sleep(delay)

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    if await safe_start():
        await send_start_message()
        await main_loop()
    await client.disconnect()

if __name__ == '__main__':
    try:
        client.loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("üîå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"üí£ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
