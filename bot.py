import telebot
import requests
import datetime
import schedule
import time
import threading
from bs4 import BeautifulSoup
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8067270518:AAFir3k_EuRhNlGF9bD9ER4VHQevld-rquk"
CHANNEL_ID = "@Digital_Fund_1"
CMC_API_KEY = "6316a41d-db32-4e49-a2a3-b66b96c663bf"

bot = telebot.TeleBot(TOKEN)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
def fetch_coingecko():
    try:
        url = "https://api.coingecko.com/api/v3/global"
        response = requests.get(url, timeout=10)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏
        data = response.json()
        
        btc_dominance = round(data["data"]["market_cap_percentage"]["btc"], 2)
        total_market_cap = round(data["data"]["total_market_cap"]["usd"] / 1e12, 2)  # –≤ —Ç—Ä–∏–ª–ª–∏–æ–Ω–∞—Ö
        market_change = round(data["data"]["market_cap_change_percentage_24h_usd"], 2)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        active_cryptos = data["data"]["active_cryptocurrencies"]
        total_volume = round(data["data"]["total_volume"]["usd"] / 1e9, 2)  # –≤ –º–∏–ª–ª–∏–∞—Ä–¥–∞—Ö
        
        return (
            f"üìä *CoinGecko Global Stats*\n"
            f"‚Ä¢ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: *${total_market_cap}T*\n"
            f"‚Ä¢ –û–±—ä–µ–º 24—á: *${total_volume}B*\n"
            f"‚Ä¢ BTC –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: *{btc_dominance}%*\n"
            f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: *{market_change}%*\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: *{active_cryptos}*"
        )
    except requests.exceptions.RequestException as e:
        print(f"CoinGecko API Error: {e}")
        return "‚ùå CoinGecko: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º–∏."
    except Exception as e:
        print(f"Unexpected CoinGecko error: {e}")
        return "‚ùå CoinGecko: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å CoinMarketCap (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
def fetch_cmc():
    try:
        headers = {"X-CMC_PRO_API_KEY": CMC_API_KEY}
        url = "https://pro-api.coinmarketcap.com/v1/global-metrics/quotes/latest"
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        data = response.json()["data"]
        
        btc_dominance = round(data["btc_dominance"], 2)
        total_market_cap = round(data["quote"]["USD"]["total_market_cap"] / 1e12, 2)  # –≤ —Ç—Ä–∏–ª–ª–∏–æ–Ω–∞—Ö
        market_change = round(data["quote"]["USD"]["total_market_cap_yesterday_percentage_change"], 2)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        eth_dominance = round(data["eth_dominance"], 2)
        altcoin_market_cap = round((data["quote"]["USD"]["total_market_cap"] * (100 - btc_dominance) / 100) / 1e12, 2)
        
        return (
            f"üìà *CoinMarketCap Global Metrics*\n"
            f"‚Ä¢ –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: *${total_market_cap}T*\n"
            f"‚Ä¢ BTC –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: *{btc_dominance}%*\n"
            f"‚Ä¢ ETH –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: *{eth_dominance}%*\n"
            f"‚Ä¢ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤: *${altcoin_market_cap}T*\n"
            f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –≤—á–µ—Ä–∞: *{market_change}%*"
        )
    except requests.exceptions.RequestException as e:
        print(f"CMC API Error: {e}")
        return "‚ùå CoinMarketCap: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API"
    except Exception as e:
        print(f"Unexpected CMC error: {e}")
        return "‚ùå CoinMarketCap: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"

# –ü–∞—Ä—Å–∏–Ω–≥ RBK Crypto (—Å–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π)
def fetch_rbk_crypto():
    try:
        url = "https://www.rbc.ru/crypto/"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        news_items = soup.select('.item__title')[:3]  # –ë–µ—Ä–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        
        if not news_items:
            return "üîç RBK Crypto: –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"
            
        news_list = []
        for idx, item in enumerate(news_items, 1):
            title = item.text.strip()
            link = item.find('a')['href'] if item.find('a') else '#'
            news_list.append(f"{idx}. [{title}]({link})")
        
        return "üì∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ RBK Crypto:*\n" + "\n".join(news_list)
    except Exception as e:
        print(f"RBK parsing error: {e}")
        return "‚ùå RBK Crypto: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –æ –∫—Ä–∏–ø—Ç–µ
def get_crypto_fact():
    facts = [
        "üí° –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BTC –±—ã–ª–∞ 2 –ø–∏—Ü—Ü—ã –∑–∞ 10,000 BTC –≤ 2010",
        "üîê –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –Ω–µ —Ö—Ä–∞–Ω—è—Ç –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã - –æ–Ω–∏ —Ö—Ä–∞–Ω—è—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏",
        "üåç –≠—Ñ–∏—Ä–∏—É–º –±—ã–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω 19-–ª–µ—Ç–Ω–∏–º –í–∏—Ç–∞–ª–∏–∫–æ–º –ë—É—Ç–µ—Ä–∏–Ω—ã–º –≤ 2013 –≥–æ–¥—É",
        "‚ö° Lightning Network –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
        "ü¶Ñ Uniswap –±—ã–ª —Å–æ–∑–¥–∞–Ω –•–∞–π–¥–µ–Ω–æ–º –ê–¥–∞–º—Å–æ–º –±–µ–∑ –≤–µ–Ω—á—É—Ä–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è"
    ]
    return random.choice(facts)

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø–æ—Å—Ç–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
def generate_post():
    now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    coingecko_data = fetch_coingecko()
    cmc_data = fetch_cmc()
    rbk_news = fetch_rbk_crypto()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    crypto_fact = get_crypto_fact()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    post = (
        f"üöÄ *–û–±–∑–æ—Ä –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞ –Ω–∞ {now}*\n\n"
        f"{coingecko_data}\n\n"
        f"{cmc_data}\n\n"
        f"{rbk_news}\n\n"
        f"{crypto_fact}\n\n"
        f"#Crypto #–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ #–ù–æ–≤–æ—Å—Ç–∏ #–ë–ª–æ–∫—á–µ–π–Ω"
    )
    
    return post

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
def send_market_update():
    try:
        summary = generate_post()
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(summary) > 4096:
            part1 = summary[:4000]
            part2 = summary[4000:]
            bot.send_message(CHANNEL_ID, part1, parse_mode="Markdown")
            bot.send_message(CHANNEL_ID, part2, parse_mode="Markdown")
        else:
            bot.send_message(CHANNEL_ID, summary, parse_mode="Markdown")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            bot.send_message(CHANNEL_ID, f"üöÄ –ö—Ä–∏–ø—Ç–æ–æ–±–∑–æ—Ä –Ω–∞ {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')} - –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.")
        except:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (—Å —Å–ª—É—á–∞–π–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏)
def schedule_posts():
    for hour in range(8, 23):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 15 –º–∏–Ω—É—Ç
        minute = random.randint(0, 15)
        schedule.every().day.at(f"{hour:02d}:{minute:02d}").do(send_market_update)
    
    while True:
        schedule.run_pending()
        time.sleep(60)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
def run_bot():
    bot.remove_webhook()
    while True:
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
            bot.infinity_polling()
        except telebot.apihelper.ApiTelegramException as e:
            if "Conflict" in str(e):
                print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)
            else:
                raise e
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)

if __name__ == "__main__":
    threading.Thread(target=schedule_posts, daemon=True).start()
    run_bot()
