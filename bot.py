import os
import telebot
import requests
import datetime
import schedule
import time
import threading
from bs4 import BeautifulSoup
import logging
from flask import Flask
import pytz
from googletrans import Translator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8067270518:AAFir3k_EuRhNlGF9bD9ER4VHQevld-rquk"
CHANNEL_ID = "@Digital_Fund_1"
CMC_API_KEY = "6316a41d-db32-4e49-a2a3-b66b96c663bf"
REQUEST_TIMEOUT = 30
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
PORT = int(os.getenv('PORT', 10000))
translator = Translator()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN, num_threads=1, skip_pending=True)

@app.route('/')
def health_check():
    return "Crypto Bot is Running", 200

def get_current_time():
    return datetime.datetime.now(MOSCOW_TZ)

def parse_rbc_crypto():
    try:
        url = "https://www.rbc.ru/crypto/"
        headers = {'User-Agent': 'Mozilla/5.0'}
        
        response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        article = soup.select_one('.js-news-feed-item:not(.news-feed__item--hidden)')
        if not article:
            return None
            
        title = article.select_one('.news-feed__item__title').text.strip()
        link = article['href']
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        article_response = requests.get(link, headers=headers, timeout=REQUEST_TIMEOUT)
        article_soup = BeautifulSoup(article_response.text, 'html.parser')
        content = '\n'.join([p.text.strip() for p in article_soup.select('.article__text p')[:5]])
        
        return {
            'title': title,
            'content': content[:2000] + '...' if len(content) > 2000 else content,
            'source': '–†–ë–ö –ö—Ä–∏–ø—Ç–æ',
            'link': link
        }
    except Exception as e:
        logger.error(f"RBK Crypto error: {str(e)}")
        return None

def parse_yahoo_crypto():
    try:
        url = "https://finance.yahoo.com/topic/crypto/"
        headers = {'User-Agent': 'Mozilla/5.0'}
        
        response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        article = soup.select_one('li.js-stream-content')
        title = article.select_one('h3').text.strip()
        link = article.find('a')['href']
        
        # –ü–µ—Ä–µ–≤–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        translated_title = translator.translate(title, dest='ru').text
        content = translator.translate(article.select_one('p').text, dest='ru').text
        
        return {
            'title': translated_title,
            'content': content[:2000] + '...' if len(content) > 2000 else content,
            'source': 'Yahoo Finance',
            'link': f"https://finance.yahoo.com{link}"
        }
    except Exception as e:
        logger.error(f"Yahoo Finance error: {str(e)}")
        return None

def parse_beincrypto():
    try:
        url = "https://ru.beincrypto.com/"
        headers = {'User-Agent': 'Mozilla/5.0'}
        
        response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        article = soup.select_one('.listingArticle')
        title = article.select_one('.title').text.strip()
        link = article.find('a')['href']
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        article_response = requests.get(link, headers=headers, timeout=REQUEST_TIMEOUT)
        article_soup = BeautifulSoup(article_response.text, 'html.parser')
        content = '\n'.join([p.text.strip() for p in article_soup.select('.article-content p')[:5]])
        
        return {
            'title': title,
            'content': content[:2000] + '...' if len(content) > 2000 else content,
            'source': 'BeInCrypto',
            'link': link
        }
    except Exception as e:
        logger.error(f"BeInCrypto error: {str(e)}")
        return None

def parse_tradingview():
    try:
        url = "https://ru.tradingview.com/news-flow/?market=crypto"
        headers = {'User-Agent': 'Mozilla/5.0'}
        
        response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        article = soup.select_one('.card-EoF7qPjG')
        title = article.select_one('.title-GrnlXkDQ').text.strip()
        link = f"https://ru.tradingview.com{article['href']}"
        content = article.select_one('.description-GrnlXkDQ').text.strip()
        
        return {
            'title': title,
            'content': content[:2000] + '...' if len(content) > 2000 else content,
            'source': 'TradingView',
            'link': link
        }
    except Exception as e:
        logger.error(f"TradingView error: {str(e)}")
        return None

def generate_post(news_item):
    try:
        return (
            f"üì∞ *{news_item['title']}*\n\n"
            f"{news_item['content']}\n\n"
            f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {news_item['source']}\n"
            f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({news_item['link']})\n\n"
            "#–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ #–ù–æ–≤–æ—Å—Ç–∏ #–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
        )
    except Exception as e:
        logger.error(f"Post generation error: {str(e)}")
        return None

def send_post(news_item):
    try:
        if not news_item:
            return
            
        post = generate_post(news_item)
        if post:
            bot.send_message(
                chat_id=CHANNEL_ID,
                text=post,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            logger.info(f"–ü–æ—Å—Ç –æ—Ç {news_item['source']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

def schedule_tasks():
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    schedule_config = {
        '09:00': parse_rbc_crypto,
        '10:00': parse_yahoo_crypto,
        '11:00': parse_beincrypto,
        '12:00': parse_tradingview,
        '13:00': parse_rbc_crypto,
        '14:00': parse_yahoo_crypto,
        '15:00': parse_beincrypto,
        '16:00': parse_tradingview,
        '17:00': parse_rbc_crypto,
        '18:00': parse_yahoo_crypto,
        '19:00': parse_beincrypto,
        '20:00': parse_tradingview
    }

    for time_str, parser in schedule_config.items():
        schedule.every().day.at(time_str).do(
            lambda p=parser: send_post(p())
        ).tag('news')

    logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {schedule.get_jobs()}")

def run_scheduler():
    while True:
        try:
            schedule.run_pending()
            time.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}")
            time.sleep(10)

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    os.environ['TZ'] = 'Europe/Moscow'
    time.tzset()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    schedule_tasks()
    
    # –ó–∞–ø—É—Å–∫ Flask
    flask_thread = threading.Thread(
        target=lambda: app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False),
        daemon=True
    )
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    
    logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º")
    try:
        while True:
            time.sleep(3600)
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
