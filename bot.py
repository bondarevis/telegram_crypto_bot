import os
import logging
import asyncio
from datetime import datetime, time, timedelta
from telethon import TelegramClient
from bs4 import BeautifulSoup
import aiohttp

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = "8067270518:AAFir3k_EuRhNlGF9bD9ER4VHQevld-rquk"
CHANNEL_ID = "@Digital_Fund_1"

SOURCE_URL = "https://cointelegraph.com/"
SELECTORS = {
    "articles": "div.posts-listing__item",
    "title": "span.posts-listing__title",
    "link": "a.posts-listing__item__permalink"
}

client = TelegramClient('render_bot', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

async def send_instant_post():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""
    try:
        await client.send_message(CHANNEL_ID, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

async def get_latest_news():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å —Å —Å–∞–π—Ç–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(SOURCE_URL) as response:
                html = await response.text()
                soup = BeautifulSoup(html, 'lxml')
                article = soup.select_one(SELECTORS["articles"])
                
                if article:
                    title = article.select_one(SELECTORS["title"]).text.strip()
                    link = article.select_one(SELECTORS["link"])['href']
                    return f"üìå {title}\nüîó {link}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
    return None

async def scheduler():
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    await send_instant_post()
    last_post = None
    
    while True:
        now = datetime.now()
        current_time = now.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (08:00-22:00 –ú–°–ö)
        if time(8, 0) <= current_time <= time(22, 0):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            if not last_post or (now - last_post).total_seconds() >= 3600:
                news = await get_latest_news()
                if news:
                    try:
                        await client.send_message(CHANNEL_ID, news)
                        logger.info("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                        last_post = now
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            else:
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        else:
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ 08:00
            next_run = now.replace(hour=8, minute=0, second=0) + timedelta(days=1 if now.hour >= 22 else 0)
            delay = (next_run - now).total_seconds()
            logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –≤ {next_run.strftime('%H:%M')}")
            await asyncio.sleep(delay)

async def main():
    await client.start()
    await scheduler()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
