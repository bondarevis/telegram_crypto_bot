import os
import telebot
import requests
import datetime
import threading
import logging
import time
from flask import Flask
import pytz
import openai
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8067270518:AAFir3k_EuRhNlGF9bD9ER4VHQevld-rquk"
CHANNEL_ID = "@Digital_Fund_1"
CMC_API_KEY = "6316a41d-db32-4e49-a2a3-b66b96c663bf"
DEEPSEEK_API_KEY = "sk-1b4a385cf98446f2995a58ba9a6fd4b8"
REQUEST_TIMEOUT = 20
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
PORT = 10000

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN, num_threads=1, skip_pending=True)
scheduler = BackgroundScheduler(timezone=MOSCOW_TZ)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DeepSeek
openai.api_key = DEEPSEEK_API_KEY
openai.api_base = "https://api.deepseek.com/v1"

@app.route('/')
def health_check():
    logger.info("Health check received")
    return "Crypto Bot is Running", 200

def get_current_time():
    return datetime.datetime.now(MOSCOW_TZ)

def generate_crypto_basics_post():
    try:
        response = openai.ChatCompletion.create(
            model="deepseek-chat",
            messages=[{
                "role": "user",
                "content": "–ù–∞–ø–∏—à–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –æ –±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏—è—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –û—Å–≤–µ—â–∏ —Ç–µ–º—ã: –±–ª–æ–∫—á–µ–π–Ω, –º–∞–π–Ω–∏–Ω–≥, —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã. –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–µ–Ω –Ω–æ–≤–∏—á–∫–∞–º, —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –∫–∞–∫ markdown."
            }],
            temperature=0.7,
            max_tokens=1000
        )
        content = response.choices[0].message.content
        return f"üìö *–û—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç*\n\n{content}\n\n#–û–±—É—á–µ–Ω–∏–µ #–ö—Ä–∏–ø—Ç–æ–û—Å–Ω–æ–≤—ã"
    except Exception as e:
        logger.error(f"DeepSeek error: {str(e)}", exc_info=True)
        return None

def fetch_market_data():
    try:
        url = "https://pro-api.coinmarketcap.com/v1/global-metrics/quotes/latest"
        headers = {
            "X-CMC_PRO_API_KEY": CMC_API_KEY,
            "Accept": "application/json"
        }
        
        response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
        response.raise_for_status()
        data = response.json()["data"]
        
        btc_dominance = round(data["btc_dominance"], 2)
        total_market_cap = round(data["quote"]["USD"]["total_market_cap"] / 1e12, 2)
        volume_24h = round(data["quote"]["USD"]["total_volume_24h"] / 1e9, 2)
        
        return (
            "üìä *–†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"‚Ä¢ –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${total_market_cap}T\n"
            f"‚Ä¢ –î–æ–º–∏–Ω–∞—Ü–∏—è BTC: {btc_dominance}%\n"
            f"‚Ä¢ –û–±—ä–µ–º –∑–∞ 24—á: ${volume_24h}B\n"
            f"‚Ä¢ –î–∞–Ω–Ω—ã–µ: CoinMarketCap"
        )
    except Exception as e:
        logger.error(f"CoinMarketCap error: {str(e)}", exc_info=True)
        return None

def generate_market_post():
    try:
        market_data = fetch_market_data()
        return f"{market_data}\n\n#–†—ã–Ω–æ–∫ #–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" if market_data else None
    except Exception as e:
        logger.error(f"Market post error: {str(e)}")
        return None

def send_post(post):
    try:
        if not post:
            logger.warning("Attempt to send empty post")
            return
            
        logger.info(f"Sending post at {get_current_time()}")
        bot.send_message(
            chat_id=CHANNEL_ID,
            text=post,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        logger.info("Post sent successfully")
    except Exception as e:
        logger.error(f"Send error: {str(e)}")

def setup_scheduler():
    logger.info("Initializing scheduler...")
    
    # –†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    scheduler.add_job(
        lambda: send_post(generate_market_post()),
        CronTrigger(hour='8,22', minute='0', timezone=MOSCOW_TZ)
    )
    
    # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã
    scheduler.add_job(
        lambda: send_post(generate_crypto_basics_post()),
        CronTrigger(hour='15,19', minute='30', timezone=MOSCOW_TZ)
    )
    
    logger.info(f"Total jobs scheduled: {len(scheduler.get_jobs())}")

if __name__ == "__main__":
    os.environ['TZ'] = 'Europe/Moscow'
    time.tzset()
    logger.info(f"Server started at {get_current_time()}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    setup_scheduler()
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫ Flask
    flask_thread = threading.Thread(
        target=lambda: app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False),
        daemon=True
    )
    flask_thread.start()
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
    try:
        while True:
            time.sleep(3600)
    except (KeyboardInterrupt, SystemExit):
        logger.info("Shutting down scheduler...")
        scheduler.shutdown()
        logger.info("Bot stopped successfully")
