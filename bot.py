import os
import logging
import asyncio
from datetime import datetime, time
from dotenv import load_dotenv
from telethon import TelegramClient
from bs4 import BeautifulSoup
import aiohttp

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
TOKEN = "8067270518:AAFir3k_EuRhNlGF9bD9ER4VHQevld-rquk"
CHANNEL_ID = "@Digital_Fund_1"

# –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
NEWS_SOURCES = [
    {
        "name": "Cointelegraph",
        "url": "https://cointelegraph.com/",
        "selectors": {
            "articles": "div.posts-listing__item",
            "title": "span.posts-listing__title",
            "link": "a.posts-listing__item__permalink"
        }
    },
    {
        "name": "Coindesk",
        "url": "https://www.coindesk.com/",
        "selectors": {
            "articles": "div.main-body section div.card",
            "title": "div.card-title a",
            "link": "div.card-title a"
        }
    }
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('crypto_news_bot', API_ID, API_HASH).start(bot_token=TOKEN)

async def send_startup_message():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        await client.send_message(
            CHANNEL_ID,
            "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
            "‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: –µ–∂–µ—á–∞—Å–Ω–æ —Å 08:00 –¥–æ 22:00"
        )
        logger.info("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

async def fetch_news(session, source):
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Å–∞–π—Ç–∞"""
    try:
        async with session.get(source['url']) as response:
            html = await response.text()
            soup = BeautifulSoup(html, 'lxml')
            
            articles = []
            for item in soup.select(source['selectors']['articles']):
                title = item.select_one(source['selectors']['title'])
                link = item.select_one(source['selectors']['link'])
                
                if title and link:
                    article_url = link['href']
                    if not article_url.startswith('http'):
                        article_url = source['url'] + article_url.lstrip('/')
                    
                    articles.append({
                        'source': source['name'],
                        'title': title.text.strip(),
                        'url': article_url
                    })
            return articles
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {source['name']}: {str(e)}")
        return []

async def post_to_channel(article):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞"""
    try:
        message = (
            f"üì∞ **{article['source']}**\n"
            f"üîπ *{article['title']}*\n"
            f"üìé [–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é]({article['url']})\n"
            f"‚è≥ {datetime.now().strftime('%H:%M %d.%m.%Y')}"
        )
        await client.send_message(CHANNEL_ID, message, link_preview=False)
        logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {article['title'][:50]}...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")

async def scheduled_parser():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞"""
    last_articles = {source['name']: set() for source in NEWS_SOURCES}
    
    async with aiohttp.ClientSession() as session:
        while True:
            current_time = datetime.now().time()
            if time(8,0) <= current_time <= time(22,0):
                try:
                    logger.info("–ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
                    
                    for source in NEWS_SOURCES:
                        articles = await fetch_news(session, source)
                        new_articles = [
                            a for a in articles
                            if a['url'] not in last_articles[source['name']]
                        
                        for article in new_articles:
                            await post_to_channel(article)
                            last_articles[source['name']].add(article['url'])
                            await asyncio.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                        
                        logger.info(f"{source['name']}: –Ω–∞–π–¥–µ–Ω–æ {len(new_articles)} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π")
                    
                    await asyncio.sleep(3600)  # –ü–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–π —á–∞—Å
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
                    await asyncio.sleep(300)
            else:
                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                now = datetime.now()
                next_run = now.replace(hour=8, minute=0, second=0)
                if now.hour >= 22:
                    next_run += timedelta(days=1)
                wait_seconds = (next_run - now).total_seconds()
                logger.info(f"–ù–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ {next_run.strftime('%H:%M')}")
                await asyncio.sleep(wait_seconds)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await client.start()
    await send_startup_message()
    await scheduled_parser()

if __name__ == '__main__':
    with client:
        client.loop.run_until_complete(main())
