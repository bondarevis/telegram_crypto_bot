import os
import telebot
import requests
import datetime
import schedule
import time
import threading
from bs4 import BeautifulSoup
import logging
from flask import Flask
import pytz
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8067270518:AAFir3k_EuRhNlGF9bD9ER4VHQevld-rquk"
CHANNEL_ID = "@Digital_Fund_1"
CMC_API_KEY = "6316a41d-db32-4e49-a2a3-b66b96c663bf"
DEEPSEEK_API_KEY = "sk-1b4a385cf98446f2995a58ba9a6fd4b8"
REQUEST_TIMEOUT = 30
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
PORT = int(os.getenv('PORT', 10000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DeepSeek
openai.api_key = DEEPSEEK_API_KEY
openai.api_base = "https://api.deepseek.com/v1"

app = Flask(__name__)
bot = telebot.TeleBot(TOKEN, num_threads=1, skip_pending=True)

@app.route('/')
def health_check():
    logger.info("–ü–æ–ª—É—á–µ–Ω health-check –∑–∞–ø—Ä–æ—Å")
    return "Crypto Bot is Running", 200

def get_current_time():
    return datetime.datetime.now(MOSCOW_TZ)

def generate_crypto_basics_post():
    try:
        response = openai.ChatCompletion.create(
            model="deepseek-chat",
            messages=[{
                "role": "user",
                "content": "–ù–∞–ø–∏—à–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –æ –±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏—è—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –û—Å–≤–µ—â–∏ —Ç–µ–º—ã: –±–ª–æ–∫—á–µ–π–Ω, –º–∞–π–Ω–∏–Ω–≥, —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã. –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–µ–Ω –Ω–æ–≤–∏—á–∫–∞–º, —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –∫–∞–∫ markdown."
            }],
            temperature=0.7,
            max_tokens=1000
        )
        content = response.choices[0].message.content
        return f"üìö *–û—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç*\n\n{content}\n\n#–û–±—É—á–µ–Ω–∏–µ #–ö—Ä–∏–ø—Ç–æ–û—Å–Ω–æ–≤—ã"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ DeepSeek: {str(e)}", exc_info=True)
        return None

def fetch_market_data():
    try:
        url = "https://pro-api.coinmarketcap.com/v1/global-metrics/quotes/latest"
        headers = {"X-CMC_PRO_API_KEY": CMC_API_KEY}
        
        response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
        response.raise_for_status()
        data = response.json()["data"]
        
        btc_dominance = round(data["btc_dominance"], 2)
        total_market_cap = round(data["quote"]["USD"]["total_market_cap"] / 1e12, 2)
        volume_24h = round(data["quote"]["USD"]["total_volume_24h"] / 1e9, 2)
        
        return (
            "üìä *–†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"‚Ä¢ –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${total_market_cap}T\n"
            f"‚Ä¢ –î–æ–º–∏–Ω–∞—Ü–∏—è BTC: {btc_dominance}%\n"
            f"‚Ä¢ –û–±—ä–µ–º –∑–∞ 24—á: ${volume_24h}B\n"
            f"‚Ä¢ –î–∞–Ω–Ω—ã–µ: CoinMarketCap"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ CoinMarketCap: {str(e)}", exc_info=True)
        return None

def parse_rbc_crypto():
    try:
        url = "https://www.rbc.ru/crypto/"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
            'Accept-Language': 'ru-RU,ru;q=0.9'
        }
        
        response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        article = soup.select_one('.js-news-feed-item:not(.news-feed__item--hidden)')
        if not article:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–∞ –†–ë–ö")
            return None
            
        title = article.select_one('.news-feed__item__title').text.strip()
        link = article['href']
        
        article_response = requests.get(link, headers=headers, timeout=REQUEST_TIMEOUT)
        article_soup = BeautifulSoup(article_response.text, 'html.parser')
        content = '\n'.join([p.text.strip() for p in article_soup.select('.article__text p')[:5]])
        
        return {
            'title': title,
            'content': content[:2000] + '...' if len(content) > 2000 else content,
            'source': '–†–ë–ö –ö—Ä–∏–ø—Ç–æ',
            'link': link
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –†–ë–ö: {str(e)}", exc_info=True)
        return None

def generate_market_post():
    try:
        market_data = fetch_market_data()
        return f"{market_data}\n\n#–†—ã–Ω–æ–∫ #–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" if market_data else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {str(e)}")
        return None

def generate_news_post(news_item):
    try:
        if not news_item:
            return None
            
        return (
            f"üì∞ *{news_item['title']}*\n\n"
            f"{news_item['content']}\n\n"
            f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {news_item['source']}\n"
            f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({news_item['link']})\n\n"
            "#–ù–æ–≤–æ—Å—Ç–∏ #–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {str(e)}")
        return None

def send_post(post):
    try:
        if not post:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –ø–æ—Å—Ç")
            return
            
        bot.send_message(
            chat_id=CHANNEL_ID,
            text=post,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        logger.info("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {str(e)}")

def schedule_tasks():
    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ {get_current_time()}")
    
    # –†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    schedule.every().day.at("08:00").do(lambda: send_post(generate_market_post()))
    schedule.every().day.at("22:00").do(lambda: send_post(generate_market_post()))
    
    # –ù–æ–≤–æ—Å—Ç–∏ –†–ë–ö
    for hour in range(9, 22):
        schedule.every().day.at(f"{hour:02d}:00").do(
            lambda: send_post(generate_news_post(parse_rbc_crypto()))
    
    # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã
    schedule.every().day.at("15:30").do(lambda: send_post(generate_crypto_basics_post()))
    schedule.every().day.at("19:30").do(lambda: send_post(generate_crypto_basics_post()))
    
    logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {len(schedule.get_jobs())}")

def run_scheduler():
    logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á")
    while True:
        try:
            schedule.run_pending()
            time.sleep(1)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}")
            time.sleep(10)

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    os.environ['TZ'] = 'Europe/Moscow'
    time.tzset()
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {get_current_time()}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
    schedule_tasks()
    
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(
        target=lambda: app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False),
        daemon=True
    )
    flask_thread.start()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    try:
        run_scheduler()
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
